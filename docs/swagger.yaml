openapi: 3.0.2
info:
  title: Data Warehouse
  description: "Proyecto para Acamica donde se administran todos los contactos de los clientes de una compañía de Marketing"
  contact:
    name: Vera Orduna
  version: 1.0.0
servers:
  - url: http://localhost:3000/api/
tags:
  - name: Roles
    description: Obtener, crear, actualizar un rol por id, obtener por id y eliminar por id
  - name: Usuarios
    description: Obtener, crear, actualizar un usuario por id, obtener por id y eliminar por id
  - name: Ciudad
    description: Obtener, crear, actualizar una ciudad por id, obtener por id y eliminar por id
  - name: País
    description: Obtener, crear, actualizar una país por id, obtener por id y eliminar por id
  - name: Región
    description: Obtener, crear, actualizar una región por id, obtener por id y eliminar por id
  - name: Compañías
    description: Obtener, crear, actualizar una compañía por id, obtener por id y eliminar por id
  - name: Contactos
    description: Obtener, crear, actualizar un contacto por id, obtener por id y eliminar por id
paths:
  /role:
    post:
      tags:
        - Roles
      summary: Endpoint para crear rol
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  example: admin
                  required: true
      responses:
        201:
          description: Rol creado con exito
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: number
                    example: 201
                  message:
                    type: string
                    example: Rol creado!
        500:
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
      security:
        - Authorization: []
    get:
      tags:
        - Roles
      summary: Endpoint para obtener roles
      responses:
        200:
          description: Obtiene todos los roles
          content:
            application/json:
              schema:
                type: object
                properties:
                  status: 
                    type: 200
                    example: 200
                  data:
                    type: array
                    message:
                      type: string
                      example: admin
        500:
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
      security:
        - Authorization: []
  /role/{id}:
    get:
      get:
      tags:
        - Roles
      summary: Endpoint para obtener rol por id
      parameters:
      - name: id
        in: path
        description: ID del rol
        required: true
        schema:
          type: string
          example: 636a6cdb659766c01da966b8
      responses:
        200:
          description: Obtiene un rol por id
          content:
            application/json:
              schema:
                type: object
                properties:
                  status: 
                    type: 200
                    example: 200
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/user'
        500:
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
      security:
        - Authorization: []
    patch:
      tags:
        - Roles
      summary: Endpoint para actualizar un rol por id
      parameters:
      - name: id
        in: path
        description: ID del usuario
        required: true
        schema:
          type: string
          example: 638248940ea30b1d0fc6cd25
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  example: testing
                  required: true
      responses:
        201:
          description: Rol actualizado con exito
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: number
                    example: 201
                  message:
                    type: string
                    example: Rol actualizado!
        500:
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
      security:
        - Authorization: [] 
    delete:
      tags:
        - Roles
      summary: Endpoint para eliminar un usuario por id
      parameters:
      - name: id
        in: path
        description: ID del usuario
        required: true
        schema:
          type: string
          example: 638248940ea30b1d0fc6cd25
      responses:
        200:
          description: Elimina un usuario por id
          content:
            application/json:
              schema:
                type: object
                properties:
                  status: 
                    type: 200
                    example: 200
                  message:
                    type: string
                    example: Role deleted succesfully
        500:
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
      security:
        - Authorization: [] 
  /login:
    post:
      tags:
        - Usuarios
      summary: Endpoint para login
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:              
                email:
                  type: string
                  example: test@test.com
                  required: true
                password: 
                  type: string
                  example: 12345678
                  required: true                
      responses:
        200:
          description: Login exitoso
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: number
                    example: 200
                  token:
                    type: string
                  admin:
                    type: boolean
        401:
          description: Usuario no valido
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: number
                    example: 401
                  message:
                    type: string
                    example: Usuario o contraseña invalido
        500:
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
  /user:
    post:
      tags:
        - Usuarios
      summary: Endpoint para crear usuario
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                firstname:
                  type: string
                  example: testing
                  required: true
                lastname:
                  type: string
                  example: testing
                  required: true
                email:
                  type: string
                  example: test@test.com
                  required: true
                password: 
                  type: string
                  example: 12345678
                  required: true
                role:
                  type: string
                  example: 6361d486f06640c24f0fe334
      responses:
        201:
          description: Usuario creado con exito
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: number
                    example: 201
                  message:
                    type: string
                    example: Usuario creado!
        500:
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
      security:
        - Authorization: []
    get:
      tags:
        - Usuarios
      summary: Endpoint para obtener usuarios
      responses:
        200:
          description: Obtiene todos los usuarios
          content:
            application/json:
              schema:
                type: object
                properties:
                  status: 
                    type: 200
                    example: 200
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/user'
        500:
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
      security:
        - Authorization: []
  /user/{id}:
    get:
      get:
      tags:
        - Usuarios
      summary: Endpoint para obtener usuario por id
      parameters:
      - name: id
        in: path
        description: ID del usuario
        required: true
        schema:
          type: string
          example: 636a6cdb659766c01da966b8
      responses:
        200:
          description: Obtiene un usuario por id
          content:
            application/json:
              schema:
                type: object
                properties:
                  status: 
                    type: 200
                    example: 200
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/user'
        500:
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
      security:
        - Authorization: []
    patch:
      tags:
        - Usuarios
      summary: Endpoint para actualizar un usuario por id
      parameters:
      - name: id
        in: path
        description: ID del usuario
        required: true
        schema:
          type: string
          example: 638248940ea30b1d0fc6cd25
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                firstname:
                  type: string
                  example: testing
                  required: true
                lastname:
                  type: string
                  example: testing
                  required: true
                email:
                  type: string
                  example: test@test.com
                  required: true
                password: 
                  type: string
                  example: 12345678
                  required: true
                role:
                  type: string
                  example: 6361d486f06640c24f0fe334
      responses:
        201:
          description: Usuario actualizado con exito
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: number
                    example: 201
                  message:
                    type: string
                    example: Usuario actualizado!
        500:
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
      security:
        - Authorization: [] 
    delete:
      tags:
        - Usuarios
      summary: Endpoint para eliminar un usuario por id
      parameters:
      - name: id
        in: path
        description: ID del usuario
        required: true
        schema:
          type: string
          example: 638248940ea30b1d0fc6cd25
      responses:
        200:
          description: Elimina un usuario por id
          content:
            application/json:
              schema:
                type: object
                properties:
                  status: 
                    type: 200
                    example: 200
                  message:
                    type: string
                    example: User deleted succesfully
        500:
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
      security:
        - Authorization: [] 
  /company:
    post:
      tags:
        - Compañías
      summary: Endpoint para crear nueva compañía
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  example: testing
                  required: true
                adress:
                  type: string
                  example: testing
                  required: true
                email:
                  type: string
                  example: test@test.com
                  required: true
                phone: 
                  type: number
                  example: 42599999
                  required: true
                city:
                  type: string
                  example: 6361d486f06640c24f0fe334
      responses:
        201:
          description: Usuario creado con exito
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: number
                    example: 201
                  message:
                    type: string
                    example: Usuario creado!
        500:
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
      security:
        - Authorization: []
    get:
      tags:
        - Compañías
      summary: Endpoint para obtener compañías
      responses:
        200:
          description: Obtiene todas las compañías
          content:
            application/json:
              schema:
                type: object
                properties:
                  status: 
                    type: 200
                    example: 200
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/company'
        500:
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
      security:
        - Authorization: []
  /company/{id}:
    get:
      get:
      tags:
        - Compañías
      summary: Endpoint para obtener compañía por id
      parameters:
      - name: id
        in: path
        description: ID de la compañía
        required: true
        schema:
          type: string
          example: 636a6cdb659766c01da966b8
      responses:
        200:
          description: Obtiene una compañía por id
          content:
            application/json:
              schema:
                type: object
                properties:
                  status: 
                    type: 200
                    example: 200
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/company'
        500:
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
      security:
        - Authorization: []
    patch:
      tags:
        - Compañías
      summary: Endpoint para actualizar una compañía por id
      parameters:
      - name: id
        in: path
        description: ID de la compañía
        required: true
        schema:
          type: string
          example: 638248940ea30b1d0fc6cd25
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  example: testing
                  required: true
                adress:
                  type: string
                  example: testing
                  required: true
                email:
                  type: string
                  example: test@test.com
                  required: true
                phone: 
                  type: number
                  example: 42599999
                  required: true
                city:
                  type: string
                  example: 6361d486f06640c24f0fe334
      responses:
        201:
          description: Compañía actualizada con exito
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: number
                    example: 201
                  message:
                    type: string
                    example: Compañía actualizado!
        500:
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
      security:
        - Authorization: [] 
    delete:
      tags:
        - Compañías
      summary: Endpoint para eliminar una compañía por id
      parameters:
      - name: id
        in: path
        description: ID de la compañía
        required: true
        schema:
          type: string
          example: 638248940ea30b1d0fc6cd25
      responses:
        200:
          description: Elimina una compañía por id
          content:
            application/json:
              schema:
                type: object
                properties:
                  status: 
                    type: 200
                    example: 200
                  message:
                    type: array
                    example: Company deleted succesfully
        500:
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
      security:
        - Authorization: [] 

components:
  schemas:
    error:
      type: object
      properties:
        status:
          type: number
          example: 500
        message:
          type: string
          example: Internal server error
    user:
      type: object
      properties:
        id:
          type: number
          example: 1
        firstname:
          type: string
        lastname:
          type: string
        email:
          type: string
        role:           
            $ref: '#/components/schemas/role'
    role:
      type: object
      properties:
        id:
          type: number
          example: 2
        name:
          type: string
          example: user
    company:
      type: object
      properties:
        name:
          type: string
          example: testing
          required: true
        adress:
          type: string
          example: testing
          required: true
        email:
          type: string
          example: test@test.com
          required: true
        phone: 
          type: number
          example: 42599999
          required: true
        city:
          type: string
          example: 6361d486f06640c24f0fe334

  securitySchemes:
    Authorization:
      type: http
      scheme: bearer
      bearerFormat: JWT